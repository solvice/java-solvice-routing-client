/* 
 * Solvice API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0-oas3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = SolviceRoutingClient.Client.SwaggerDateConverter;

namespace SolviceRoutingClient.Model
{
    /// <summary>
    /// TMP
    /// </summary>
    [DataContract]
        public partial class TMP :  IEquatable<TMP>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TMP" /> class.
        /// </summary>
        /// <param name=""> (required).</param>
        /// <param name=""> (required).</param>
        /// <param name=""> (required).</param>
        public TMP(string  = default(string), List<Sales>  = default(List<Sales>), List<Store>  = default(List<Store>))
        {
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new InvalidDataException(" is a required property for TMP and cannot be null");
            }
            else
            {
                this.Solver = ;
            }
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new InvalidDataException(" is a required property for TMP and cannot be null");
            }
            else
            {
                this.Sales = ;
            }
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new InvalidDataException(" is a required property for TMP and cannot be null");
            }
            else
            {
                this.Stores = ;
            }
        }
        
        /// <summary>
        /// Gets or Sets Solver
        /// </summary>
        [DataMember(Name="solver", EmitDefaultValue=false)]
        public string Solver { get; set; }

        /// <summary>
        /// Gets or Sets Sales
        /// </summary>
        [DataMember(Name="sales", EmitDefaultValue=false)]
        public List<Sales> Sales { get; set; }

        /// <summary>
        /// Gets or Sets Stores
        /// </summary>
        [DataMember(Name="stores", EmitDefaultValue=false)]
        public List<Store> Stores { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TMP {\n");
            sb.Append("  Solver: ").Append(Solver).Append("\n");
            sb.Append("  Sales: ").Append(Sales).Append("\n");
            sb.Append("  Stores: ").Append(Stores).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TMP);
        }

        /// <summary>
        /// Returns true if TMP instances are equal
        /// </summary>
        /// <param name="input">Instance of TMP to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TMP input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Solver == input.Solver ||
                    (this.Solver != null &&
                    this.Solver.Equals(input.Solver))
                ) && 
                (
                    this.Sales == input.Sales ||
                    this.Sales != null &&
                    this.Sales.SequenceEqual(input.Sales)
                ) && 
                (
                    this.Stores == input.Stores ||
                    this.Stores != null &&
                    this.Stores.SequenceEqual(input.Stores)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Solver != null)
                    hashCode = hashCode * 59 + this.Solver.GetHashCode();
                if (this.Sales != null)
                    hashCode = hashCode * 59 + this.Sales.GetHashCode();
                if (this.Stores != null)
                    hashCode = hashCode * 59 + this.Stores.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
