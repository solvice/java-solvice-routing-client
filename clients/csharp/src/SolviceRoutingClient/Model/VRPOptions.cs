/* 
 * Solvice API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0-oas3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = SolviceRoutingClient.Client.SwaggerDateConverter;

namespace SolviceRoutingClient.Model
{
    /// <summary>
    /// VRPOptions
    /// </summary>
    [DataContract]
        public partial class VRPOptions :  IEquatable<VRPOptions>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VRPOptions" /> class.
        /// </summary>
        /// <param name="">.</param>
        /// <param name="">.</param>
        /// <param name="">.</param>
        public VRPOptions(string  = default(string), string  = default(string), bool?  = default(bool?))
        {
            this.Profile = ;
            this.AllowOvertime = ;
            this.Overconstrained = ;
        }
        
        /// <summary>
        /// Gets or Sets Profile
        /// </summary>
        [DataMember(Name="profile", EmitDefaultValue=false)]
        public string Profile { get; set; }

        /// <summary>
        /// Gets or Sets AllowOvertime
        /// </summary>
        [DataMember(Name="allow_overtime", EmitDefaultValue=false)]
        public string AllowOvertime { get; set; }

        /// <summary>
        /// Gets or Sets Overconstrained
        /// </summary>
        [DataMember(Name="overconstrained", EmitDefaultValue=false)]
        public bool? Overconstrained { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VRPOptions {\n");
            sb.Append("  Profile: ").Append(Profile).Append("\n");
            sb.Append("  AllowOvertime: ").Append(AllowOvertime).Append("\n");
            sb.Append("  Overconstrained: ").Append(Overconstrained).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VRPOptions);
        }

        /// <summary>
        /// Returns true if VRPOptions instances are equal
        /// </summary>
        /// <param name="input">Instance of VRPOptions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VRPOptions input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Profile == input.Profile ||
                    (this.Profile != null &&
                    this.Profile.Equals(input.Profile))
                ) && 
                (
                    this.AllowOvertime == input.AllowOvertime ||
                    (this.AllowOvertime != null &&
                    this.AllowOvertime.Equals(input.AllowOvertime))
                ) && 
                (
                    this.Overconstrained == input.Overconstrained ||
                    (this.Overconstrained != null &&
                    this.Overconstrained.Equals(input.Overconstrained))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Profile != null)
                    hashCode = hashCode * 59 + this.Profile.GetHashCode();
                if (this.AllowOvertime != null)
                    hashCode = hashCode * 59 + this.AllowOvertime.GetHashCode();
                if (this.Overconstrained != null)
                    hashCode = hashCode * 59 + this.Overconstrained.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
