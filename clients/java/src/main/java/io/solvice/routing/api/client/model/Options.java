/*
 * OnRoute API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.1.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.solvice.routing.api.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.math.BigDecimal;

/**
 * Options
 */

public class Options {
  /**
   * Gets or Sets profile
   */
  @JsonAdapter(ProfileEnum.Adapter.class)
  public enum ProfileEnum {
    CAR("CAR"),
    TRUCK("TRUCK");

    private String value;

    ProfileEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ProfileEnum fromValue(String text) {
      for (ProfileEnum b : ProfileEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ProfileEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProfileEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProfileEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ProfileEnum.fromValue(String.valueOf(value));
      }
    }
  }
  @SerializedName("profile")
  private ProfileEnum profile = null;

  @SerializedName("allow_overtime")
  private String allowOvertime = null;

  @SerializedName("overconstrained")
  private Boolean overconstrained = null;

  @SerializedName("minimize_vehicle_use")
  private Boolean minimizeVehicleUse = null;

  @SerializedName("vehicle_setup_cost")
  private BigDecimal vehicleSetupCost = null;
  public Options profile(ProfileEnum profile) {
    this.profile = profile;
    return this;
  }

  

  /**
  * Get profile
  * @return profile
  **/
  @Schema(description = "")
  public ProfileEnum getProfile() {
    return profile;
  }
  public void setProfile(ProfileEnum profile) {
    this.profile = profile;
  }
  public Options allowOvertime(String allowOvertime) {
    this.allowOvertime = allowOvertime;
    return this;
  }

  

  /**
  * If the &#x60;shiftend&#x60; should be a soft condition to take into account. When &#x60;allow_overtime: true&#x60; then some orders will be planned after &#x60;shiftend&#x60;. 
  * @return allowOvertime
  **/
  @Schema(description = "If the `shiftend` should be a soft condition to take into account. When `allow_overtime: true` then some orders will be planned after `shiftend`. ")
  public String getAllowOvertime() {
    return allowOvertime;
  }
  public void setAllowOvertime(String allowOvertime) {
    this.allowOvertime = allowOvertime;
  }
  public Options overconstrained(Boolean overconstrained) {
    this.overconstrained = overconstrained;
    return this;
  }

  

  /**
  * If you do not need to assign everything to 
  * @return overconstrained
  **/
  @Schema(description = "If you do not need to assign everything to ")
  public Boolean isOverconstrained() {
    return overconstrained;
  }
  public void setOverconstrained(Boolean overconstrained) {
    this.overconstrained = overconstrained;
  }
  public Options minimizeVehicleUse(Boolean minimizeVehicleUse) {
    this.minimizeVehicleUse = minimizeVehicleUse;
    return this;
  }

  

  /**
  * sd
  * @return minimizeVehicleUse
  **/
  @Schema(description = "sd")
  public Boolean isMinimizeVehicleUse() {
    return minimizeVehicleUse;
  }
  public void setMinimizeVehicleUse(Boolean minimizeVehicleUse) {
    this.minimizeVehicleUse = minimizeVehicleUse;
  }
  public Options vehicleSetupCost(BigDecimal vehicleSetupCost) {
    this.vehicleSetupCost = vehicleSetupCost;
    return this;
  }

  

  /**
  * Get vehicleSetupCost
  * @return vehicleSetupCost
  **/
  @Schema(description = "")
  public BigDecimal getVehicleSetupCost() {
    return vehicleSetupCost;
  }
  public void setVehicleSetupCost(BigDecimal vehicleSetupCost) {
    this.vehicleSetupCost = vehicleSetupCost;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Options options = (Options) o;
    return Objects.equals(this.profile, options.profile) &&
        Objects.equals(this.allowOvertime, options.allowOvertime) &&
        Objects.equals(this.overconstrained, options.overconstrained) &&
        Objects.equals(this.minimizeVehicleUse, options.minimizeVehicleUse) &&
        Objects.equals(this.vehicleSetupCost, options.vehicleSetupCost);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(profile, allowOvertime, overconstrained, minimizeVehicleUse, vehicleSetupCost);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Options {\n");
    
    sb.append("    profile: ").append(toIndentedString(profile)).append("\n");
    sb.append("    allowOvertime: ").append(toIndentedString(allowOvertime)).append("\n");
    sb.append("    overconstrained: ").append(toIndentedString(overconstrained)).append("\n");
    sb.append("    minimizeVehicleUse: ").append(toIndentedString(minimizeVehicleUse)).append("\n");
    sb.append("    vehicleSetupCost: ").append(toIndentedString(vehicleSetupCost)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
