/*
 * OnRoute API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.1.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.solvice.routing.api.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;

/**
 * Options block to tweak the Routing Engine.
 */
@Schema(description = "Options block to tweak the Routing Engine.")
public class Options {
  /**
   * All vehicles are either CAR or TRUCK.
   */
  @JsonAdapter(ProfileEnum.Adapter.class)
  public enum ProfileEnum {
    CAR("CAR"),
    TRUCK("TRUCK");

    private String value;

    ProfileEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ProfileEnum fromValue(String text) {
      for (ProfileEnum b : ProfileEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ProfileEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProfileEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProfileEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ProfileEnum.fromValue(String.valueOf(value));
      }
    }
  }
  @SerializedName("profile")
  private ProfileEnum profile = null;

  @SerializedName("allow_overtime")
  private Boolean allowOvertime = null;

  @SerializedName("overconstrained")
  private Boolean overconstrained = null;

  @SerializedName("minimize_vehicle_use")
  private Boolean minimizeVehicleUse = null;

  @SerializedName("traffic")
  private Integer traffic = null;

  @SerializedName("polylines")
  private Boolean polylines = null;
  /**
   * Calculate in minutes or seconds. Minutes is advised.
   */
  @JsonAdapter(TimeUnitEnum.Adapter.class)
  public enum TimeUnitEnum {
    MINUTES("MINUTES"),
    SECONDS("SECONDS");

    private String value;

    TimeUnitEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static TimeUnitEnum fromValue(String text) {
      for (TimeUnitEnum b : TimeUnitEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<TimeUnitEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TimeUnitEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TimeUnitEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TimeUnitEnum.fromValue(String.valueOf(value));
      }
    }
  }
  @SerializedName("timeUnit")
  private TimeUnitEnum timeUnit = TimeUnitEnum.MINUTES;

  @SerializedName("force_type_constraints")
  private Boolean forceTypeConstraints = null;
  public Options profile(ProfileEnum profile) {
    this.profile = profile;
    return this;
  }

  

  /**
  * All vehicles are either CAR or TRUCK.
  * @return profile
  **/
  @Schema(description = "All vehicles are either CAR or TRUCK.")
  public ProfileEnum getProfile() {
    return profile;
  }
  public void setProfile(ProfileEnum profile) {
    this.profile = profile;
  }
  public Options allowOvertime(Boolean allowOvertime) {
    this.allowOvertime = allowOvertime;
    return this;
  }

  

  /**
  * If the &#x60;shiftend&#x60; should be a soft condition to take into account. When &#x60;allow_overtime: true&#x60; then some orders will be planned after &#x60;shiftend&#x60;. 
  * @return allowOvertime
  **/
  @Schema(description = "If the `shiftend` should be a soft condition to take into account. When `allow_overtime: true` then some orders will be planned after `shiftend`. ")
  public Boolean isAllowOvertime() {
    return allowOvertime;
  }
  public void setAllowOvertime(Boolean allowOvertime) {
    this.allowOvertime = allowOvertime;
  }
  public Options overconstrained(Boolean overconstrained) {
    this.overconstrained = overconstrained;
    return this;
  }

  

  /**
  * If you do not need to assign every order to a vehicle, then set &#x60;overconstrained: true&#x60;. 
  * @return overconstrained
  **/
  @Schema(description = "If you do not need to assign every order to a vehicle, then set `overconstrained: true`. ")
  public Boolean isOverconstrained() {
    return overconstrained;
  }
  public void setOverconstrained(Boolean overconstrained) {
    this.overconstrained = overconstrained;
  }
  public Options minimizeVehicleUse(Boolean minimizeVehicleUse) {
    this.minimizeVehicleUse = minimizeVehicleUse;
    return this;
  }

  

  /**
  * Minimise the vehicle useage or minimise total travel time. Two different objective functions.
  * @return minimizeVehicleUse
  **/
  @Schema(description = "Minimise the vehicle useage or minimise total travel time. Two different objective functions.")
  public Boolean isMinimizeVehicleUse() {
    return minimizeVehicleUse;
  }
  public void setMinimizeVehicleUse(Boolean minimizeVehicleUse) {
    this.minimizeVehicleUse = minimizeVehicleUse;
  }
  public Options traffic(Integer traffic) {
    this.traffic = traffic;
    return this;
  }

  

  /**
  * Modifier for traffic.
  * @return traffic
  **/
  @Schema(description = "Modifier for traffic.")
  public Integer getTraffic() {
    return traffic;
  }
  public void setTraffic(Integer traffic) {
    this.traffic = traffic;
  }
  public Options polylines(Boolean polylines) {
    this.polylines = polylines;
    return this;
  }

  

  /**
  * Let our map server calculate the actual polylines for connecting the visits. Processing will take longer.
  * @return polylines
  **/
  @Schema(description = "Let our map server calculate the actual polylines for connecting the visits. Processing will take longer.")
  public Boolean isPolylines() {
    return polylines;
  }
  public void setPolylines(Boolean polylines) {
    this.polylines = polylines;
  }
  public Options timeUnit(TimeUnitEnum timeUnit) {
    this.timeUnit = timeUnit;
    return this;
  }

  

  /**
  * Calculate in minutes or seconds. Minutes is advised.
  * @return timeUnit
  **/
  @Schema(description = "Calculate in minutes or seconds. Minutes is advised.")
  public TimeUnitEnum getTimeUnit() {
    return timeUnit;
  }
  public void setTimeUnit(TimeUnitEnum timeUnit) {
    this.timeUnit = timeUnit;
  }
  public Options forceTypeConstraints(Boolean forceTypeConstraints) {
    this.forceTypeConstraints = forceTypeConstraints;
    return this;
  }

  

  /**
  * If yes, then the type constraints violations are not allowed. Only do this when you are sure about type definitions.
  * @return forceTypeConstraints
  **/
  @Schema(description = "If yes, then the type constraints violations are not allowed. Only do this when you are sure about type definitions.")
  public Boolean isForceTypeConstraints() {
    return forceTypeConstraints;
  }
  public void setForceTypeConstraints(Boolean forceTypeConstraints) {
    this.forceTypeConstraints = forceTypeConstraints;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Options options = (Options) o;
    return Objects.equals(this.profile, options.profile) &&
        Objects.equals(this.allowOvertime, options.allowOvertime) &&
        Objects.equals(this.overconstrained, options.overconstrained) &&
        Objects.equals(this.minimizeVehicleUse, options.minimizeVehicleUse) &&
        Objects.equals(this.traffic, options.traffic) &&
        Objects.equals(this.polylines, options.polylines) &&
        Objects.equals(this.timeUnit, options.timeUnit) &&
        Objects.equals(this.forceTypeConstraints, options.forceTypeConstraints);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(profile, allowOvertime, overconstrained, minimizeVehicleUse, traffic, polylines, timeUnit, forceTypeConstraints);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Options {\n");
    
    sb.append("    profile: ").append(toIndentedString(profile)).append("\n");
    sb.append("    allowOvertime: ").append(toIndentedString(allowOvertime)).append("\n");
    sb.append("    overconstrained: ").append(toIndentedString(overconstrained)).append("\n");
    sb.append("    minimizeVehicleUse: ").append(toIndentedString(minimizeVehicleUse)).append("\n");
    sb.append("    traffic: ").append(toIndentedString(traffic)).append("\n");
    sb.append("    polylines: ").append(toIndentedString(polylines)).append("\n");
    sb.append("    timeUnit: ").append(toIndentedString(timeUnit)).append("\n");
    sb.append("    forceTypeConstraints: ").append(toIndentedString(forceTypeConstraints)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
