/*
 * OnRoute API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.1.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.solvice.routing.api.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;

/**
 * RoutingSolutionUnresolved
 */

public class RoutingSolutionUnresolved {

  @SerializedName("name")
  private String name = null;

  @SerializedName("value")
  private Integer value = null;
  /**
   * Level of unresolved constraint.
   */
  @JsonAdapter(LevelEnum.Adapter.class)
  public enum LevelEnum {
    HARD("HARD"),
    SOFT("SOFT"),
    MEDIUM("MEDIUM");

    private String value;

    LevelEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static LevelEnum fromValue(String text) {
      for (LevelEnum b : LevelEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<LevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LevelEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return LevelEnum.fromValue(String.valueOf(value));
      }
    }
  }
  @SerializedName("level")
  private LevelEnum level = null;
  public RoutingSolutionUnresolved name(String name) {
    this.name = name;
    return this;
  }

  

  /**
  * Name of the constraint.
  * @return name
  **/
  @Schema(description = "Name of the constraint.")
  public String getName() {
    return name;
  }
  public void setName(String name) {
    this.name = name;
  }
  public RoutingSolutionUnresolved value(Integer value) {
    this.value = value;
    return this;
  }

  

  /**
  * Value of the unresolved constraint. The higher, the more deviation from perfection this constraint has.
  * @return value
  **/
  @Schema(description = "Value of the unresolved constraint. The higher, the more deviation from perfection this constraint has.")
  public Integer getValue() {
    return value;
  }
  public void setValue(Integer value) {
    this.value = value;
  }
  public RoutingSolutionUnresolved level(LevelEnum level) {
    this.level = level;
    return this;
  }

  

  /**
  * Level of unresolved constraint.
  * @return level
  **/
  @Schema(description = "Level of unresolved constraint.")
  public LevelEnum getLevel() {
    return level;
  }
  public void setLevel(LevelEnum level) {
    this.level = level;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RoutingSolutionUnresolved routingSolutionUnresolved = (RoutingSolutionUnresolved) o;
    return Objects.equals(this.name, routingSolutionUnresolved.name) &&
        Objects.equals(this.value, routingSolutionUnresolved.value) &&
        Objects.equals(this.level, routingSolutionUnresolved.level);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(name, value, level);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RoutingSolutionUnresolved {\n");
    
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    level: ").append(toIndentedString(level)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
