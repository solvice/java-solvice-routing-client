/*
 * OnRoute API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.1.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.solvice.routing.api.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.solvice.routing.api.client.model.VehicleBreaks;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.threeten.bp.LocalDate;

/**
 * Resource definition of a vehicle. Orders can be assigned in sequence to vehicles. 
 */
@Schema(description = "Resource definition of a vehicle. Orders can be assigned in sequence to vehicles. ")
public class Vehicle {

  @SerializedName("name")
  private String name = null;

  @SerializedName("startlocation")
  private String startlocation = null;

  @SerializedName("endlocation")
  private String endlocation = null;

  @SerializedName("capacity")
  private Integer capacity = null;

  @SerializedName("capacity2")
  private Integer capacity2 = null;

  @SerializedName("shiftstart")
  private Integer shiftstart = null;

  @SerializedName("shiftend")
  private Integer shiftend = null;

  @SerializedName("type")
  private List<String> type = null;

  @SerializedName("unavailable")
  private List<LocalDate> unavailable = null;

  @SerializedName("workingDays")
  private List<String> workingDays = null;

  @SerializedName("overtime")
  private Boolean overtime = null;

  @SerializedName("overtime_end")
  private Integer overtimeEnd = null;

  @SerializedName("breaks")
  private VehicleBreaks breaks = null;
  /**
   * Gets or Sets category
   */
  @JsonAdapter(CategoryEnum.Adapter.class)
  public enum CategoryEnum {
    CAR("CAR"),
    BIKE("BIKE"),
    TRUCK("TRUCK");

    private String value;

    CategoryEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static CategoryEnum fromValue(String text) {
      for (CategoryEnum b : CategoryEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<CategoryEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CategoryEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CategoryEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return CategoryEnum.fromValue(String.valueOf(value));
      }
    }
  }
  @SerializedName("category")
  private CategoryEnum category = null;
  public Vehicle name(String name) {
    this.name = name;
    return this;
  }

  

  /**
  * Unique identification of a vehicle via the name.
  * @return name
  **/
  @Schema(example = "driver1", required = true, description = "Unique identification of a vehicle via the name.")
  public String getName() {
    return name;
  }
  public void setName(String name) {
    this.name = name;
  }
  public Vehicle startlocation(String startlocation) {
    this.startlocation = startlocation;
    return this;
  }

  

  /**
  * Start address of the vehicle
  * @return startlocation
  **/
  @Schema(example = "locatie1", required = true, description = "Start address of the vehicle")
  public String getStartlocation() {
    return startlocation;
  }
  public void setStartlocation(String startlocation) {
    this.startlocation = startlocation;
  }
  public Vehicle endlocation(String endlocation) {
    this.endlocation = endlocation;
    return this;
  }

  

  /**
  * End address of the vehicle. The optimisation takes into account the travel back to this location.
  * @return endlocation
  **/
  @Schema(example = "locatie1", description = "End address of the vehicle. The optimisation takes into account the travel back to this location.")
  public String getEndlocation() {
    return endlocation;
  }
  public void setEndlocation(String endlocation) {
    this.endlocation = endlocation;
  }
  public Vehicle capacity(Integer capacity) {
    this.capacity = capacity;
    return this;
  }

  

  /**
  * Load capacity of the vehicle. For example, 30 tons is the digit 30.
  * @return capacity
  **/
  @Schema(example = "30", description = "Load capacity of the vehicle. For example, 30 tons is the digit 30.")
  public Integer getCapacity() {
    return capacity;
  }
  public void setCapacity(Integer capacity) {
    this.capacity = capacity;
  }
  public Vehicle capacity2(Integer capacity2) {
    this.capacity2 = capacity2;
    return this;
  }

  

  /**
  * Load capacity of the vehicle (second metric). For example, 400 items.
  * @return capacity2
  **/
  @Schema(example = "5", description = "Load capacity of the vehicle (second metric). For example, 400 items.")
  public Integer getCapacity2() {
    return capacity2;
  }
  public void setCapacity2(Integer capacity2) {
    this.capacity2 = capacity2;
  }
  public Vehicle shiftstart(Integer shiftstart) {
    this.shiftstart = shiftstart;
    return this;
  }

  

  /**
  * Starting time of the shift of this vehicle.
  * minimum: 0
  * maximum: 1439
  * @return shiftstart
  **/
  @Schema(example = "460", description = "Starting time of the shift of this vehicle.")
  public Integer getShiftstart() {
    return shiftstart;
  }
  public void setShiftstart(Integer shiftstart) {
    this.shiftstart = shiftstart;
  }
  public Vehicle shiftend(Integer shiftend) {
    this.shiftend = shiftend;
    return this;
  }

  

  /**
  * Get shiftend
  * minimum: 0
  * maximum: 1439
  * @return shiftend
  **/
  @Schema(example = "820", description = "")
  public Integer getShiftend() {
    return shiftend;
  }
  public void setShiftend(Integer shiftend) {
    this.shiftend = shiftend;
  }
  public Vehicle type(List<String> type) {
    this.type = type;
    return this;
  }

  public Vehicle addTypeItem(String typeItem) {
    if (this.type == null) {
      this.type = new ArrayList<String>();
    }
    this.type.add(typeItem);
    return this;
  }

  /**
  * Get type
  * @return type
  **/
  @Schema(description = "")
  public List<String> getType() {
    return type;
  }
  public void setType(List<String> type) {
    this.type = type;
  }
  public Vehicle unavailable(List<LocalDate> unavailable) {
    this.unavailable = unavailable;
    return this;
  }

  public Vehicle addUnavailableItem(LocalDate unavailableItem) {
    if (this.unavailable == null) {
      this.unavailable = new ArrayList<LocalDate>();
    }
    this.unavailable.add(unavailableItem);
    return this;
  }

  /**
  * Get unavailable
  * @return unavailable
  **/
  @Schema(description = "")
  public List<LocalDate> getUnavailable() {
    return unavailable;
  }
  public void setUnavailable(List<LocalDate> unavailable) {
    this.unavailable = unavailable;
  }
  public Vehicle workingDays(List<String> workingDays) {
    this.workingDays = workingDays;
    return this;
  }

  public Vehicle addWorkingDaysItem(String workingDaysItem) {
    if (this.workingDays == null) {
      this.workingDays = new ArrayList<String>();
    }
    this.workingDays.add(workingDaysItem);
    return this;
  }

  /**
  * Get workingDays
  * @return workingDays
  **/
  @Schema(description = "")
  public List<String> getWorkingDays() {
    return workingDays;
  }
  public void setWorkingDays(List<String> workingDays) {
    this.workingDays = workingDays;
  }
  public Vehicle overtime(Boolean overtime) {
    this.overtime = overtime;
    return this;
  }

  

  /**
  * Indication if vehicle can go in overtime or not.
  * @return overtime
  **/
  @Schema(description = "Indication if vehicle can go in overtime or not.")
  public Boolean isOvertime() {
    return overtime;
  }
  public void setOvertime(Boolean overtime) {
    this.overtime = overtime;
  }
  public Vehicle overtimeEnd(Integer overtimeEnd) {
    this.overtimeEnd = overtimeEnd;
    return this;
  }

  

  /**
  * Last timeblock of overtime.
  * minimum: 0
  * maximum: 1439
  * @return overtimeEnd
  **/
  @Schema(description = "Last timeblock of overtime.")
  public Integer getOvertimeEnd() {
    return overtimeEnd;
  }
  public void setOvertimeEnd(Integer overtimeEnd) {
    this.overtimeEnd = overtimeEnd;
  }
  public Vehicle breaks(VehicleBreaks breaks) {
    this.breaks = breaks;
    return this;
  }

  

  /**
  * Get breaks
  * @return breaks
  **/
  @Schema(description = "")
  public VehicleBreaks getBreaks() {
    return breaks;
  }
  public void setBreaks(VehicleBreaks breaks) {
    this.breaks = breaks;
  }
  public Vehicle category(CategoryEnum category) {
    this.category = category;
    return this;
  }

  

  /**
  * Get category
  * @return category
  **/
  @Schema(description = "")
  public CategoryEnum getCategory() {
    return category;
  }
  public void setCategory(CategoryEnum category) {
    this.category = category;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Vehicle vehicle = (Vehicle) o;
    return Objects.equals(this.name, vehicle.name) &&
        Objects.equals(this.startlocation, vehicle.startlocation) &&
        Objects.equals(this.endlocation, vehicle.endlocation) &&
        Objects.equals(this.capacity, vehicle.capacity) &&
        Objects.equals(this.capacity2, vehicle.capacity2) &&
        Objects.equals(this.shiftstart, vehicle.shiftstart) &&
        Objects.equals(this.shiftend, vehicle.shiftend) &&
        Objects.equals(this.type, vehicle.type) &&
        Objects.equals(this.unavailable, vehicle.unavailable) &&
        Objects.equals(this.workingDays, vehicle.workingDays) &&
        Objects.equals(this.overtime, vehicle.overtime) &&
        Objects.equals(this.overtimeEnd, vehicle.overtimeEnd) &&
        Objects.equals(this.breaks, vehicle.breaks) &&
        Objects.equals(this.category, vehicle.category);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(name, startlocation, endlocation, capacity, capacity2, shiftstart, shiftend, type, unavailable, workingDays, overtime, overtimeEnd, breaks, category);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Vehicle {\n");
    
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    startlocation: ").append(toIndentedString(startlocation)).append("\n");
    sb.append("    endlocation: ").append(toIndentedString(endlocation)).append("\n");
    sb.append("    capacity: ").append(toIndentedString(capacity)).append("\n");
    sb.append("    capacity2: ").append(toIndentedString(capacity2)).append("\n");
    sb.append("    shiftstart: ").append(toIndentedString(shiftstart)).append("\n");
    sb.append("    shiftend: ").append(toIndentedString(shiftend)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    unavailable: ").append(toIndentedString(unavailable)).append("\n");
    sb.append("    workingDays: ").append(toIndentedString(workingDays)).append("\n");
    sb.append("    overtime: ").append(toIndentedString(overtime)).append("\n");
    sb.append("    overtimeEnd: ").append(toIndentedString(overtimeEnd)).append("\n");
    sb.append("    breaks: ").append(toIndentedString(breaks)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
