/*
 * OnRoute API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.1.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.solvice.routing.api.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.solvice.routing.api.client.model.Location;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import org.threeten.bp.LocalDate;

/**
 * Visit
 */

public class Visit {

  @SerializedName("location")
  private String location = null;

  @SerializedName("order")
  private String order = null;

  @SerializedName("arrival")
  private Integer arrival = null;

  @SerializedName("finish")
  private Integer finish = null;

  @SerializedName("drive")
  private Integer drive = null;

  @SerializedName("distance")
  private Integer distance = null;

  @SerializedName("date")
  private LocalDate date = null;

  @SerializedName("activity")
  private String activity = null;

  @SerializedName("coords")
  private Location coords = null;
  public Visit location(String location) {
    this.location = location;
    return this;
  }

  

  /**
  * Location name.
  * @return location
  **/
  @Schema(example = "Ghent, Belgium", description = "Location name.")
  public String getLocation() {
    return location;
  }
  public void setLocation(String location) {
    this.location = location;
  }
  public Visit order(String order) {
    this.order = order;
    return this;
  }

  

  /**
  * Order name.
  * @return order
  **/
  @Schema(example = "order_233062", description = "Order name.")
  public String getOrder() {
    return order;
  }
  public void setOrder(String order) {
    this.order = order;
  }
  public Visit arrival(Integer arrival) {
    this.arrival = arrival;
    return this;
  }

  

  /**
  * Arrival at visit
  * minimum: 0
  * maximum: 1440
  * @return arrival
  **/
  @Schema(example = "730", description = "Arrival at visit")
  public Integer getArrival() {
    return arrival;
  }
  public void setArrival(Integer arrival) {
    this.arrival = arrival;
  }
  public Visit finish(Integer finish) {
    this.finish = finish;
    return this;
  }

  

  /**
  * Get finish
  * minimum: 0
  * maximum: 1440
  * @return finish
  **/
  @Schema(example = "750", description = "")
  public Integer getFinish() {
    return finish;
  }
  public void setFinish(Integer finish) {
    this.finish = finish;
  }
  public Visit drive(Integer drive) {
    this.drive = drive;
    return this;
  }

  

  /**
  * Drive time to next location in minutes.
  * minimum: 0
  * @return drive
  **/
  @Schema(example = "5", description = "Drive time to next location in minutes.")
  public Integer getDrive() {
    return drive;
  }
  public void setDrive(Integer drive) {
    this.drive = drive;
  }
  public Visit distance(Integer distance) {
    this.distance = distance;
    return this;
  }

  

  /**
  * Distance to next location in meters.
  * @return distance
  **/
  @Schema(example = "4294", description = "Distance to next location in meters.")
  public Integer getDistance() {
    return distance;
  }
  public void setDistance(Integer distance) {
    this.distance = distance;
  }
  public Visit date(LocalDate date) {
    this.date = date;
    return this;
  }

  

  /**
  * Date on which this visit is scheduled.
  * @return date
  **/
  @Schema(description = "Date on which this visit is scheduled.")
  public LocalDate getDate() {
    return date;
  }
  public void setDate(LocalDate date) {
    this.date = date;
  }
  public Visit activity(String activity) {
    this.activity = activity;
    return this;
  }

  

  /**
  * Type of visit (pickup, delivery or execution)
  * @return activity
  **/
  @Schema(description = "Type of visit (pickup, delivery or execution)")
  public String getActivity() {
    return activity;
  }
  public void setActivity(String activity) {
    this.activity = activity;
  }
  public Visit coords(Location coords) {
    this.coords = coords;
    return this;
  }

  

  /**
  * Get coords
  * @return coords
  **/
  @Schema(description = "")
  public Location getCoords() {
    return coords;
  }
  public void setCoords(Location coords) {
    this.coords = coords;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Visit visit = (Visit) o;
    return Objects.equals(this.location, visit.location) &&
        Objects.equals(this.order, visit.order) &&
        Objects.equals(this.arrival, visit.arrival) &&
        Objects.equals(this.finish, visit.finish) &&
        Objects.equals(this.drive, visit.drive) &&
        Objects.equals(this.distance, visit.distance) &&
        Objects.equals(this.date, visit.date) &&
        Objects.equals(this.activity, visit.activity) &&
        Objects.equals(this.coords, visit.coords);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(location, order, arrival, finish, drive, distance, date, activity, coords);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Visit {\n");
    
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    order: ").append(toIndentedString(order)).append("\n");
    sb.append("    arrival: ").append(toIndentedString(arrival)).append("\n");
    sb.append("    finish: ").append(toIndentedString(finish)).append("\n");
    sb.append("    drive: ").append(toIndentedString(drive)).append("\n");
    sb.append("    distance: ").append(toIndentedString(distance)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    activity: ").append(toIndentedString(activity)).append("\n");
    sb.append("    coords: ").append(toIndentedString(coords)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
