# coding: utf-8

"""
    OnRoute API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.1.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from SolviceRoutingClient.models.routing_solution_score import RoutingSolutionScore  # noqa: F401,E501
from SolviceRoutingClient.models.routing_solution_unresolved import RoutingSolutionUnresolved  # noqa: F401,E501
from SolviceRoutingClient.models.visit import Visit  # noqa: F401,E501


class RoutingSolution(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'score': 'RoutingSolutionScore',
        'unresolved': 'list[RoutingSolutionUnresolved]',
        'solution': 'dict(str, list[Visit])'
    }

    attribute_map = {
        'score': 'score',
        'unresolved': 'unresolved',
        'solution': 'solution'
    }

    def __init__(self, score=None, unresolved=None, solution=None):  # noqa: E501
        """RoutingSolution - a model defined in Swagger"""  # noqa: E501
        self._score = None
        self._unresolved = None
        self._solution = None
        self.discriminator = None
        if score is not None:
            self.score = score
        if unresolved is not None:
            self.unresolved = unresolved
        if solution is not None:
            self.solution = solution

    @property
    def score(self):
        """Gets the score of this RoutingSolution.  # noqa: E501


        :return: The score of this RoutingSolution.  # noqa: E501
        :rtype: RoutingSolutionScore
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this RoutingSolution.


        :param score: The score of this RoutingSolution.  # noqa: E501
        :type: RoutingSolutionScore
        """

        self._score = score

    @property
    def unresolved(self):
        """Gets the unresolved of this RoutingSolution.  # noqa: E501

        The unresolved constraints show the list of constraints that could not achieve feasibility for the current solve.  # noqa: E501

        :return: The unresolved of this RoutingSolution.  # noqa: E501
        :rtype: list[RoutingSolutionUnresolved]
        """
        return self._unresolved

    @unresolved.setter
    def unresolved(self, unresolved):
        """Sets the unresolved of this RoutingSolution.

        The unresolved constraints show the list of constraints that could not achieve feasibility for the current solve.  # noqa: E501

        :param unresolved: The unresolved of this RoutingSolution.  # noqa: E501
        :type: list[RoutingSolutionUnresolved]
        """

        self._unresolved = unresolved

    @property
    def solution(self):
        """Gets the solution of this RoutingSolution.  # noqa: E501


        :return: The solution of this RoutingSolution.  # noqa: E501
        :rtype: dict(str, list[Visit])
        """
        return self._solution

    @solution.setter
    def solution(self, solution):
        """Sets the solution of this RoutingSolution.


        :param solution: The solution of this RoutingSolution.  # noqa: E501
        :type: dict(str, list[Visit])
        """

        self._solution = solution

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RoutingSolution, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RoutingSolution):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
