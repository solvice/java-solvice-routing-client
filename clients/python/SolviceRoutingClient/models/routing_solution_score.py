# coding: utf-8

"""
    OnRoute API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.1.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class RoutingSolutionScore(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'hard_score': 'int',
        'medium_score': 'int',
        'soft_score': 'int',
        'feasible': 'bool'
    }

    attribute_map = {
        'hard_score': 'hardScore',
        'medium_score': 'mediumScore',
        'soft_score': 'softScore',
        'feasible': 'feasible'
    }

    def __init__(self, hard_score=None, medium_score=None, soft_score=None, feasible=None):  # noqa: E501
        """RoutingSolutionScore - a model defined in Swagger"""  # noqa: E501
        self._hard_score = None
        self._medium_score = None
        self._soft_score = None
        self._feasible = None
        self.discriminator = None
        if hard_score is not None:
            self.hard_score = hard_score
        if medium_score is not None:
            self.medium_score = medium_score
        if soft_score is not None:
            self.soft_score = soft_score
        if feasible is not None:
            self.feasible = feasible

    @property
    def hard_score(self):
        """Gets the hard_score of this RoutingSolutionScore.  # noqa: E501

        The score of the constraints that are hard. This should be 0 in order to be feasible.  # noqa: E501

        :return: The hard_score of this RoutingSolutionScore.  # noqa: E501
        :rtype: int
        """
        return self._hard_score

    @hard_score.setter
    def hard_score(self, hard_score):
        """Sets the hard_score of this RoutingSolutionScore.

        The score of the constraints that are hard. This should be 0 in order to be feasible.  # noqa: E501

        :param hard_score: The hard_score of this RoutingSolutionScore.  # noqa: E501
        :type: int
        """

        self._hard_score = hard_score

    @property
    def medium_score(self):
        """Gets the medium_score of this RoutingSolutionScore.  # noqa: E501

        The score of the constraints that are medium.  # noqa: E501

        :return: The medium_score of this RoutingSolutionScore.  # noqa: E501
        :rtype: int
        """
        return self._medium_score

    @medium_score.setter
    def medium_score(self, medium_score):
        """Sets the medium_score of this RoutingSolutionScore.

        The score of the constraints that are medium.  # noqa: E501

        :param medium_score: The medium_score of this RoutingSolutionScore.  # noqa: E501
        :type: int
        """

        self._medium_score = medium_score

    @property
    def soft_score(self):
        """Gets the soft_score of this RoutingSolutionScore.  # noqa: E501

        The score of the constraints that are soft.  # noqa: E501

        :return: The soft_score of this RoutingSolutionScore.  # noqa: E501
        :rtype: int
        """
        return self._soft_score

    @soft_score.setter
    def soft_score(self, soft_score):
        """Sets the soft_score of this RoutingSolutionScore.

        The score of the constraints that are soft.  # noqa: E501

        :param soft_score: The soft_score of this RoutingSolutionScore.  # noqa: E501
        :type: int
        """

        self._soft_score = soft_score

    @property
    def feasible(self):
        """Gets the feasible of this RoutingSolutionScore.  # noqa: E501

        Feasibility check on hard constraints. Check unresolved parameter if you cannot reach feasibility.  # noqa: E501

        :return: The feasible of this RoutingSolutionScore.  # noqa: E501
        :rtype: bool
        """
        return self._feasible

    @feasible.setter
    def feasible(self, feasible):
        """Sets the feasible of this RoutingSolutionScore.

        Feasibility check on hard constraints. Check unresolved parameter if you cannot reach feasibility.  # noqa: E501

        :param feasible: The feasible of this RoutingSolutionScore.  # noqa: E501
        :type: bool
        """

        self._feasible = feasible

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RoutingSolutionScore, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RoutingSolutionScore):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
