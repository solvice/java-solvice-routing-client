# coding: utf-8

"""
    OnRoute API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.1.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from SolviceRoutingClient.models.location import Location  # noqa: F401,E501


class Sales(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'home': 'Location',
        'max_visits': 'int',
        'max_travel': 'int',
        'percentage': 'int',
        'languages': 'list[str]'
    }

    attribute_map = {
        'name': 'name',
        'home': 'home',
        'max_visits': 'max_visits',
        'max_travel': 'max_travel',
        'percentage': 'percentage',
        'languages': 'languages'
    }

    def __init__(self, name=None, home=None, max_visits=None, max_travel=None, percentage=None, languages=None):  # noqa: E501
        """Sales - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._home = None
        self._max_visits = None
        self._max_travel = None
        self._percentage = None
        self._languages = None
        self.discriminator = None
        self.name = name
        self.home = home
        if max_visits is not None:
            self.max_visits = max_visits
        if max_travel is not None:
            self.max_travel = max_travel
        if percentage is not None:
            self.percentage = percentage
        if languages is not None:
            self.languages = languages

    @property
    def name(self):
        """Gets the name of this Sales.  # noqa: E501


        :return: The name of this Sales.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Sales.


        :param name: The name of this Sales.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def home(self):
        """Gets the home of this Sales.  # noqa: E501


        :return: The home of this Sales.  # noqa: E501
        :rtype: Location
        """
        return self._home

    @home.setter
    def home(self, home):
        """Sets the home of this Sales.


        :param home: The home of this Sales.  # noqa: E501
        :type: Location
        """
        if home is None:
            raise ValueError("Invalid value for `home`, must not be `None`")  # noqa: E501

        self._home = home

    @property
    def max_visits(self):
        """Gets the max_visits of this Sales.  # noqa: E501

        Maximum number of total visits  # noqa: E501

        :return: The max_visits of this Sales.  # noqa: E501
        :rtype: int
        """
        return self._max_visits

    @max_visits.setter
    def max_visits(self, max_visits):
        """Sets the max_visits of this Sales.

        Maximum number of total visits  # noqa: E501

        :param max_visits: The max_visits of this Sales.  # noqa: E501
        :type: int
        """

        self._max_visits = max_visits

    @property
    def max_travel(self):
        """Gets the max_travel of this Sales.  # noqa: E501

        Maximum total travel time (in km bird distance)  # noqa: E501

        :return: The max_travel of this Sales.  # noqa: E501
        :rtype: int
        """
        return self._max_travel

    @max_travel.setter
    def max_travel(self, max_travel):
        """Sets the max_travel of this Sales.

        Maximum total travel time (in km bird distance)  # noqa: E501

        :param max_travel: The max_travel of this Sales.  # noqa: E501
        :type: int
        """

        self._max_travel = max_travel

    @property
    def percentage(self):
        """Gets the percentage of this Sales.  # noqa: E501

        Working percentage (parttime)  # noqa: E501

        :return: The percentage of this Sales.  # noqa: E501
        :rtype: int
        """
        return self._percentage

    @percentage.setter
    def percentage(self, percentage):
        """Sets the percentage of this Sales.

        Working percentage (parttime)  # noqa: E501

        :param percentage: The percentage of this Sales.  # noqa: E501
        :type: int
        """

        self._percentage = percentage

    @property
    def languages(self):
        """Gets the languages of this Sales.  # noqa: E501

        Languages  # noqa: E501

        :return: The languages of this Sales.  # noqa: E501
        :rtype: list[str]
        """
        return self._languages

    @languages.setter
    def languages(self, languages):
        """Sets the languages of this Sales.

        Languages  # noqa: E501

        :param languages: The languages of this Sales.  # noqa: E501
        :type: list[str]
        """

        self._languages = languages

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Sales, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Sales):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
