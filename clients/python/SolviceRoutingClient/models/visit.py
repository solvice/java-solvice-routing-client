# coding: utf-8

"""
    OnRoute API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.1.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from SolviceRoutingClient.models.location import Location  # noqa: F401,E501


class Visit(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'location': 'str',
        'order': 'str',
        'arrival': 'int',
        'finish': 'int',
        'drive': 'int',
        'distance': 'int',
        '_date': 'date',
        'activity': 'str',
        'coords': 'Location'
    }

    attribute_map = {
        'location': 'location',
        'order': 'order',
        'arrival': 'arrival',
        'finish': 'finish',
        'drive': 'drive',
        'distance': 'distance',
        '_date': 'date',
        'activity': 'activity',
        'coords': 'coords'
    }

    def __init__(self, location=None, order=None, arrival=None, finish=None, drive=None, distance=None, _date=None, activity=None, coords=None):  # noqa: E501
        """Visit - a model defined in Swagger"""  # noqa: E501
        self._location = None
        self._order = None
        self._arrival = None
        self._finish = None
        self._drive = None
        self._distance = None
        self.__date = None
        self._activity = None
        self._coords = None
        self.discriminator = None
        if location is not None:
            self.location = location
        if order is not None:
            self.order = order
        if arrival is not None:
            self.arrival = arrival
        if finish is not None:
            self.finish = finish
        if drive is not None:
            self.drive = drive
        if distance is not None:
            self.distance = distance
        if _date is not None:
            self._date = _date
        if activity is not None:
            self.activity = activity
        if coords is not None:
            self.coords = coords

    @property
    def location(self):
        """Gets the location of this Visit.  # noqa: E501

        Location name.  # noqa: E501

        :return: The location of this Visit.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this Visit.

        Location name.  # noqa: E501

        :param location: The location of this Visit.  # noqa: E501
        :type: str
        """

        self._location = location

    @property
    def order(self):
        """Gets the order of this Visit.  # noqa: E501

        Order name.  # noqa: E501

        :return: The order of this Visit.  # noqa: E501
        :rtype: str
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this Visit.

        Order name.  # noqa: E501

        :param order: The order of this Visit.  # noqa: E501
        :type: str
        """

        self._order = order

    @property
    def arrival(self):
        """Gets the arrival of this Visit.  # noqa: E501

        Arrival at visit  # noqa: E501

        :return: The arrival of this Visit.  # noqa: E501
        :rtype: int
        """
        return self._arrival

    @arrival.setter
    def arrival(self, arrival):
        """Sets the arrival of this Visit.

        Arrival at visit  # noqa: E501

        :param arrival: The arrival of this Visit.  # noqa: E501
        :type: int
        """

        self._arrival = arrival

    @property
    def finish(self):
        """Gets the finish of this Visit.  # noqa: E501


        :return: The finish of this Visit.  # noqa: E501
        :rtype: int
        """
        return self._finish

    @finish.setter
    def finish(self, finish):
        """Sets the finish of this Visit.


        :param finish: The finish of this Visit.  # noqa: E501
        :type: int
        """

        self._finish = finish

    @property
    def drive(self):
        """Gets the drive of this Visit.  # noqa: E501

        Drive time to next location in minutes.  # noqa: E501

        :return: The drive of this Visit.  # noqa: E501
        :rtype: int
        """
        return self._drive

    @drive.setter
    def drive(self, drive):
        """Sets the drive of this Visit.

        Drive time to next location in minutes.  # noqa: E501

        :param drive: The drive of this Visit.  # noqa: E501
        :type: int
        """

        self._drive = drive

    @property
    def distance(self):
        """Gets the distance of this Visit.  # noqa: E501

        Distance to next location in meters.  # noqa: E501

        :return: The distance of this Visit.  # noqa: E501
        :rtype: int
        """
        return self._distance

    @distance.setter
    def distance(self, distance):
        """Sets the distance of this Visit.

        Distance to next location in meters.  # noqa: E501

        :param distance: The distance of this Visit.  # noqa: E501
        :type: int
        """

        self._distance = distance

    @property
    def _date(self):
        """Gets the _date of this Visit.  # noqa: E501

        Date on which this visit is scheduled.  # noqa: E501

        :return: The _date of this Visit.  # noqa: E501
        :rtype: date
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this Visit.

        Date on which this visit is scheduled.  # noqa: E501

        :param _date: The _date of this Visit.  # noqa: E501
        :type: date
        """

        self.__date = _date

    @property
    def activity(self):
        """Gets the activity of this Visit.  # noqa: E501

        Type of visit (pickup, delivery or execution)  # noqa: E501

        :return: The activity of this Visit.  # noqa: E501
        :rtype: str
        """
        return self._activity

    @activity.setter
    def activity(self, activity):
        """Sets the activity of this Visit.

        Type of visit (pickup, delivery or execution)  # noqa: E501

        :param activity: The activity of this Visit.  # noqa: E501
        :type: str
        """

        self._activity = activity

    @property
    def coords(self):
        """Gets the coords of this Visit.  # noqa: E501


        :return: The coords of this Visit.  # noqa: E501
        :rtype: Location
        """
        return self._coords

    @coords.setter
    def coords(self, coords):
        """Sets the coords of this Visit.


        :param coords: The coords of this Visit.  # noqa: E501
        :type: Location
        """

        self._coords = coords

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Visit, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Visit):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
