# coding: utf-8

"""
    OnRoute API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.1.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from SolviceRoutingClient.models.location import Location  # noqa: F401,E501
from SolviceRoutingClient.models.options import Options  # noqa: F401,E501
from SolviceRoutingClient.models.order import Order  # noqa: F401,E501
from SolviceRoutingClient.models.solve_request import SolveRequest  # noqa: F401,E501
from SolviceRoutingClient.models.solver import Solver  # noqa: F401,E501
from SolviceRoutingClient.models.vehicle import Vehicle  # noqa: F401,E501


class VRP(SolveRequest):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'locations': 'list[Location]',
        'fleet': 'list[Vehicle]',
        'orders': 'list[Order]',
        'options': 'Options'
    }

    attribute_map = {
        'locations': 'locations',
        'fleet': 'fleet',
        'orders': 'orders',
        'options': 'options'
    }

    def __init__(self, locations=None, fleet=None, orders=None, options=None):  # noqa: E501
        """VRP - a model defined in Swagger"""  # noqa: E501
        self._locations = None
        self._fleet = None
        self._orders = None
        self._options = None
        self.discriminator = None
        self.locations = locations
        self.fleet = fleet
        self.orders = orders
        self.options = options

    @property
    def locations(self):
        """Gets the locations of this VRP.  # noqa: E501


        :return: The locations of this VRP.  # noqa: E501
        :rtype: list[Location]
        """
        return self._locations

    @locations.setter
    def locations(self, locations):
        """Sets the locations of this VRP.


        :param locations: The locations of this VRP.  # noqa: E501
        :type: list[Location]
        """
        if locations is None:
            raise ValueError("Invalid value for `locations`, must not be `None`")  # noqa: E501

        self._locations = locations

    @property
    def fleet(self):
        """Gets the fleet of this VRP.  # noqa: E501


        :return: The fleet of this VRP.  # noqa: E501
        :rtype: list[Vehicle]
        """
        return self._fleet

    @fleet.setter
    def fleet(self, fleet):
        """Sets the fleet of this VRP.


        :param fleet: The fleet of this VRP.  # noqa: E501
        :type: list[Vehicle]
        """
        if fleet is None:
            raise ValueError("Invalid value for `fleet`, must not be `None`")  # noqa: E501

        self._fleet = fleet

    @property
    def orders(self):
        """Gets the orders of this VRP.  # noqa: E501


        :return: The orders of this VRP.  # noqa: E501
        :rtype: list[Order]
        """
        return self._orders

    @orders.setter
    def orders(self, orders):
        """Sets the orders of this VRP.


        :param orders: The orders of this VRP.  # noqa: E501
        :type: list[Order]
        """
        if orders is None:
            raise ValueError("Invalid value for `orders`, must not be `None`")  # noqa: E501

        self._orders = orders

    @property
    def options(self):
        """Gets the options of this VRP.  # noqa: E501


        :return: The options of this VRP.  # noqa: E501
        :rtype: Options
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this VRP.


        :param options: The options of this VRP.  # noqa: E501
        :type: Options
        """
        if options is None:
            raise ValueError("Invalid value for `options`, must not be `None`")  # noqa: E501

        self._options = options

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VRP, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VRP):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
