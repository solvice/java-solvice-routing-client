# coding: utf-8

"""
    Solvice API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0-oas3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.big_decimal import BigDecimal  # noqa: F401,E501


class Vehicle(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'startlocation': 'str',
        'endlocation': 'str',
        'capacity': 'BigDecimal',
        'capacity2': 'BigDecimal',
        'shiftstart': 'int',
        'shiftend': 'int',
        'type': 'list[str]'
    }

    attribute_map = {
        'name': 'name',
        'startlocation': 'startlocation',
        'endlocation': 'endlocation',
        'capacity': 'capacity',
        'capacity2': 'capacity2',
        'shiftstart': 'shiftstart',
        'shiftend': 'shiftend',
        'type': 'type'
    }

    def __init__(self, name=None, startlocation=None, endlocation=None, capacity=None, capacity2=None, shiftstart=None, shiftend=None, type=None):  # noqa: E501
        """Vehicle - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._startlocation = None
        self._endlocation = None
        self._capacity = None
        self._capacity2 = None
        self._shiftstart = None
        self._shiftend = None
        self._type = None
        self.discriminator = None
        self.name = name
        self.startlocation = startlocation
        if endlocation is not None:
            self.endlocation = endlocation
        if capacity is not None:
            self.capacity = capacity
        if capacity2 is not None:
            self.capacity2 = capacity2
        if shiftstart is not None:
            self.shiftstart = shiftstart
        if shiftend is not None:
            self.shiftend = shiftend
        if type is not None:
            self.type = type

    @property
    def name(self):
        """Gets the name of this Vehicle.  # noqa: E501


        :return: The name of this Vehicle.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Vehicle.


        :param name: The name of this Vehicle.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def startlocation(self):
        """Gets the startlocation of this Vehicle.  # noqa: E501


        :return: The startlocation of this Vehicle.  # noqa: E501
        :rtype: str
        """
        return self._startlocation

    @startlocation.setter
    def startlocation(self, startlocation):
        """Sets the startlocation of this Vehicle.


        :param startlocation: The startlocation of this Vehicle.  # noqa: E501
        :type: str
        """
        if startlocation is None:
            raise ValueError("Invalid value for `startlocation`, must not be `None`")  # noqa: E501

        self._startlocation = startlocation

    @property
    def endlocation(self):
        """Gets the endlocation of this Vehicle.  # noqa: E501


        :return: The endlocation of this Vehicle.  # noqa: E501
        :rtype: str
        """
        return self._endlocation

    @endlocation.setter
    def endlocation(self, endlocation):
        """Sets the endlocation of this Vehicle.


        :param endlocation: The endlocation of this Vehicle.  # noqa: E501
        :type: str
        """

        self._endlocation = endlocation

    @property
    def capacity(self):
        """Gets the capacity of this Vehicle.  # noqa: E501


        :return: The capacity of this Vehicle.  # noqa: E501
        :rtype: BigDecimal
        """
        return self._capacity

    @capacity.setter
    def capacity(self, capacity):
        """Sets the capacity of this Vehicle.


        :param capacity: The capacity of this Vehicle.  # noqa: E501
        :type: BigDecimal
        """

        self._capacity = capacity

    @property
    def capacity2(self):
        """Gets the capacity2 of this Vehicle.  # noqa: E501


        :return: The capacity2 of this Vehicle.  # noqa: E501
        :rtype: BigDecimal
        """
        return self._capacity2

    @capacity2.setter
    def capacity2(self, capacity2):
        """Sets the capacity2 of this Vehicle.


        :param capacity2: The capacity2 of this Vehicle.  # noqa: E501
        :type: BigDecimal
        """

        self._capacity2 = capacity2

    @property
    def shiftstart(self):
        """Gets the shiftstart of this Vehicle.  # noqa: E501


        :return: The shiftstart of this Vehicle.  # noqa: E501
        :rtype: int
        """
        return self._shiftstart

    @shiftstart.setter
    def shiftstart(self, shiftstart):
        """Sets the shiftstart of this Vehicle.


        :param shiftstart: The shiftstart of this Vehicle.  # noqa: E501
        :type: int
        """

        self._shiftstart = shiftstart

    @property
    def shiftend(self):
        """Gets the shiftend of this Vehicle.  # noqa: E501


        :return: The shiftend of this Vehicle.  # noqa: E501
        :rtype: int
        """
        return self._shiftend

    @shiftend.setter
    def shiftend(self, shiftend):
        """Sets the shiftend of this Vehicle.


        :param shiftend: The shiftend of this Vehicle.  # noqa: E501
        :type: int
        """

        self._shiftend = shiftend

    @property
    def type(self):
        """Gets the type of this Vehicle.  # noqa: E501


        :return: The type of this Vehicle.  # noqa: E501
        :rtype: list[str]
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Vehicle.


        :param type: The type of this Vehicle.  # noqa: E501
        :type: list[str]
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Vehicle, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Vehicle):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
