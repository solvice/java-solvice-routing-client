# coding: utf-8

"""
    Solvice API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0-oas3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class VRPOptions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'profile': 'String',
        'allow_overtime': 'String',
        'overconstrained': 'bool'
    }

    attribute_map = {
        'profile': 'profile',
        'allow_overtime': 'allow_overtime',
        'overconstrained': 'overconstrained'
    }

    def __init__(self, profile=None, allow_overtime=None, overconstrained=None):  # noqa: E501
        """VRPOptions - a model defined in Swagger"""  # noqa: E501
        self._profile = None
        self._allow_overtime = None
        self._overconstrained = None
        self.discriminator = None
        if profile is not None:
            self.profile = profile
        if allow_overtime is not None:
            self.allow_overtime = allow_overtime
        if overconstrained is not None:
            self.overconstrained = overconstrained

    @property
    def profile(self):
        """Gets the profile of this VRPOptions.  # noqa: E501


        :return: The profile of this VRPOptions.  # noqa: E501
        :rtype: String
        """
        return self._profile

    @profile.setter
    def profile(self, profile):
        """Sets the profile of this VRPOptions.


        :param profile: The profile of this VRPOptions.  # noqa: E501
        :type: String
        """

        self._profile = profile

    @property
    def allow_overtime(self):
        """Gets the allow_overtime of this VRPOptions.  # noqa: E501


        :return: The allow_overtime of this VRPOptions.  # noqa: E501
        :rtype: String
        """
        return self._allow_overtime

    @allow_overtime.setter
    def allow_overtime(self, allow_overtime):
        """Sets the allow_overtime of this VRPOptions.


        :param allow_overtime: The allow_overtime of this VRPOptions.  # noqa: E501
        :type: String
        """

        self._allow_overtime = allow_overtime

    @property
    def overconstrained(self):
        """Gets the overconstrained of this VRPOptions.  # noqa: E501


        :return: The overconstrained of this VRPOptions.  # noqa: E501
        :rtype: bool
        """
        return self._overconstrained

    @overconstrained.setter
    def overconstrained(self, overconstrained):
        """Sets the overconstrained of this VRPOptions.


        :param overconstrained: The overconstrained of this VRPOptions.  # noqa: E501
        :type: bool
        """

        self._overconstrained = overconstrained

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VRPOptions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VRPOptions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
